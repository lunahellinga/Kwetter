version: "3.9"

services:
  kwetter-api:
    image: fontyssa/kwetter-api
    build:
      context: .
      dockerfile: KwetterAPI/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - RABBITMQ_HOST=rabbitmq
      - CACHE_URI=http://cache-service/
    ports:
      - "5000:80"
    depends_on:
      - rabbitmq
  
  data-service:
    image: fontyssa/kwetter-data-service
    build:
      context: .
      dockerfile: DataService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - RABBITMQ_HOST=rabbitmq
      - ROOT_CERT=/cert/root.crt
      - DATABASE=data-service
      - YUGABYTE_HOST=temp
      - YUGABYTE_USER=temp
      - YUGABYTE_PASSWORD=temp
  #    secrets:
  #      - yugabyte_host
  #      - yugabyte_user
  #      - yugabyte_password
  
  content-service:
    image: fontyssa/kwetter-content-service
    build:
      context: .
      dockerfile: ContentService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - RABBITMQ_HOST=rabbitmq
      - ROOT_CERT=/cert/root.crt
      - DATABASE=content-service
      - YUGABYTE_HOST=temp
      - YUGABYTE_USER=temp
      - YUGABYTE_PASSWORD=temp
  #    secrets:
  #      - yugabyte_host
  #      - yugabyte_user
  #      - yugabyte_password
  mention-service:
    image: fontyssa/kwetter-mention-service
    build:
      context: .
      dockerfile: MentionService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - RABBITMQ_HOST=rabbitmq
      - ROOT_CERT=/cert/root.crt
      - DATABASE=mention-service
      - YUGABYTE_HOST=temp
      - YUGABYTE_USER=temp
      - YUGABYTE_PASSWORD=temp
  #    secrets:
  #      - yugabyte_host
  #      - yugabyte_user
  #      - yugabyte_password
  tag-service:
    image: fontyssa/kwetter-tag-service
    build:
      context: .
      dockerfile: TagService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - RABBITMQ_HOST=rabbitmq
      - ROOT_CERT=/cert/root.crt
      - DATABASE=tag-service
      - YUGABYTE_HOST=temp
      - YUGABYTE_USER=temp
      - YUGABYTE_PASSWORD=temp
  #    secrets:
  #      - yugabyte_host
  #      - yugabyte_user
  #      - yugabyte_password
  metadata-service:
    image: fontyssa/kwetter-metadata-service
    build:
      context: .
      dockerfile: MetadataService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - RABBITMQ_HOST=rabbitmq
      - ROOT_CERT=/cert/root.crt
      - DATABASE=metadata-service
      - YUGABYTE_HOST=temp
      - YUGABYTE_USER=temp
      - YUGABYTE_PASSWORD=temp
  #    secrets:
  #      - yugabyte_host
  #      - yugabyte_user
  #      - yugabyte_password
  
  cache-service:
    image: fontyssa/kwetter-cache-service
    build:
      context: .
      dockerfile: CacheService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - RABBITMQ_HOST=rabbitmq
      - MONGO_CONNECTION=mongodb://caching-mongo:27017
      - MONGO_DATABASE=cache
      - MONGO_COLLECTION=kweets
      - REDIS_CONFIG=caching-redis
      - REDIS_INSTANCE=cache
    ports:
      - "5001:80"
  caching-mongo:
    image: mongo
    environment:
      # MONGO_INITDB_ROOT_USERNAME: root
      # MONGO_INITDB_ROOT_PASSWORD: todo
      - MONGO_INITDB_DATABASE=cache
    expose:
      - "27017"
    ports:
      - "3301:27017"
    volumes:
      - cache-volume:/data/db
  caching-redis:
    image: redis:7-alpine
    expose:
      - "6379"
    ports:
      - "6379:6379"
  caching-mongo-express:
    image: mongo-express
    restart: always
    ports:
      - "8083:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=caching-mongo
    depends_on:
      - caching-mongo
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=caching-redis
    ports:
      - "8013:8081"
    depends_on:
      - caching-redis

  orchestrator:
    image: fontyssa/kweeter
    build:
      context: .
      dockerfile: Kweeter/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - RABBITMQ_USERNAME=rabbit
      - RABBITMQ_PASSWORD=rabbit
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_VIRTUAL_HOST=/
      - MONGODB_CONNECTION=mongodb://orchestrator-mongo:27017/
      - MONGODB_DATABASE=kweeter
      - MONGODB_COLLECTION=saga
    depends_on:
      - orchestrator-mongo

  orchestrator-mongo:
    image: mongo
    ports:
      - "27017:27017"
  orchestrator-mongo-express:
    image: mongo-express
    restart: always
    ports:
      - "8082:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: orchestrator-mongo
    depends_on:
      - orchestrator-mongo

  rabbitmq:
    image: masstransit/rabbitmq:latest
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15692:15692"
  
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - loki-volume:/loki
      - type: bind
        source: ./Config/Loki
        target: /mnt/config
    command: -config.file=/mnt/config/loki-config.yaml
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    volumes:
      - grafana-volume:/etc/grafana
      - type: bind
        source: ./Config/Grafana
        target: /mnt/config
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
  promtail:
    image: grafana/promtail
    volumes:
      - promtail-volume:/var/log
      - type: bind
        source: ./Config/Promtail
        target: /mnt/config
    command: -config.file=/mnt/config/promtail-config.yaml
  
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_HTTPS_CERTIFICATE_FILE=/opt/keycloak/conf/server.crt.pem
      - KC_HTTPS_CERTIFICATE_KEY_FILE=/opt/keycloak/conf/server.key.pem
    command:
      [
        'start-dev',
        "--hostname=keycloak"
      ]
    ports:
      - "8080:8080"
      - "8443:8443"
    volumes:
      - type: bind
        source: ./Secrets/Certs/Keycloak
        target: /opt/keycloak/conf
      - keycloak-volume:/opt/keycloak/data/

volumes:
  loki-volume:
    driver: local
  promtail-volume:
    driver: local
  grafana-volume:
    driver: local
  cache-volume:
    driver: local
  keycloak-volume:
    driver: local

#secrets:
#  yugabyte_user:
#    file: ./Secrets/Yugabyte/username.txt
#  yugabyte_password:
#    file: ./Secrets/Yugabyte/password.txt
#  yugabyte_host:
#    file: ./Secrets/Yugabyte/host.txt